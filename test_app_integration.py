#!/usr/bin/env python3
"""
NetFlux5G App Integration Test
Test the new YAML configuration system with the actual NetFlux5G application
"""

import os
import sys
import time

# Add the src directory to the path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_app_integration():
    """Test integration with NetFlux5G app"""
    print("üß™ Testing NetFlux5G App Integration with YAML Config System")
    print("=" * 65)
    
    # Test 1: Verify configuration system is ready
    print("\n1Ô∏è‚É£ Verifying Configuration System...")
    
    try:
        from utils.config_manager import ConfigManager
        config_mgr = ConfigManager()
        templates = config_mgr.list_available_templates()
        
        print(f"‚úÖ ConfigManager imported successfully")
        print(f"‚úÖ Open5GS templates available: {len(templates['open5gs'])}")
        print(f"‚úÖ UERANSIM templates available: {len(templates['ueransim'])}")
        
    except Exception as e:
        print(f"‚ùå Configuration system error: {e}")
        return False
    
    # Test 2: Verify Enhanced Container Manager integration
    print("\n2Ô∏è‚É£ Verifying Enhanced Container Manager...")
    
    try:
        from simulation.enhanced_container_manager import EnhancedContainerManager
        container_mgr = EnhancedContainerManager()
        
        if hasattr(container_mgr, 'config_manager'):
            print("‚úÖ ConfigManager integrated with Enhanced Container Manager")
        else:
            print("‚ùå ConfigManager not integrated")
            return False
            
        if container_mgr.client:
            print("‚úÖ Docker client connected")
        else:
            print("‚ùå Docker client not available")
            return False
            
    except Exception as e:
        print(f"‚ùå Container manager error: {e}")
        return False
    
    # Test 3: Create test configurations for app deployment
    print("\n3Ô∏è‚É£ Creating Test Component Configurations...")
    
    test_components = [
        ('nrf', 'nrf-app-test', {'name': 'nrf-app-test'}),
        ('amf', 'amf-app-test', {'name': 'amf-app-test', 'mcc': '999', 'mnc': '70'}),
        ('smf', 'smf-app-test', {'name': 'smf-app-test'}),
        ('gnb', 'gnb-app-test', {'name': 'gnb-app-test', 'mcc': '999', 'mnc': '70'}),
        ('ue', 'ue-app-test', {'name': 'ue-app-test', 'imsi': '999700000000001'})
    ]
    
    configs_created = []
    
    for comp_type, comp_name, properties in test_components:
        try:
            config_file = config_mgr.create_instance_config(comp_type, comp_name, properties)
            if config_file:
                configs_created.append((comp_name, config_file))
                print(f"‚úÖ Created {comp_type} config: {comp_name}")
            else:
                print(f"‚ùå Failed to create {comp_type} config")
        except Exception as e:
            print(f"‚ùå Error creating {comp_type} config: {e}")
    
    # Test 4: Verify configurations are valid
    print("\n4Ô∏è‚É£ Validating Generated Configurations...")
    
    valid_count = 0
    for comp_name, config_file in configs_created:
        try:
            if config_mgr.validate_config(config_file):
                print(f"‚úÖ {comp_name}: Valid")
                valid_count += 1
            else:
                print(f"‚ùå {comp_name}: Invalid")
        except Exception as e:
            print(f"‚ùå {comp_name}: Validation error - {e}")
    
    print(f"\nüìä Validation Results: {valid_count}/{len(configs_created)} configurations valid")
    
    # Test 5: Show configuration directories for app usage
    print("\n5Ô∏è‚É£ Configuration Directories for App Usage...")
    
    for comp_name, _ in configs_created:
        config_dir = config_mgr.get_instance_config_dir(comp_name)
        print(f"üìÅ {comp_name}: {config_dir}")
    
    # Cleanup test configurations
    print("\nüßπ Cleaning up test configurations...")
    for comp_name, _ in configs_created:
        config_mgr.cleanup_instance_config(comp_name)
        print(f"üóëÔ∏è  Cleaned: {comp_name}")
    
    print("\n" + "=" * 65)
    print("üéâ NetFlux5G App Integration Test Complete!")
    print("=" * 65)
    
    if valid_count == len(configs_created) and configs_created:
        print("\n‚úÖ ALL TESTS PASSED - Ready for NetFlux5G GUI testing!")
        return True
    else:
        print("\n‚ùå Some tests failed - Check configuration system")
        return False

def show_gui_testing_instructions():
    """Show instructions for testing with GUI"""
    print("\nüìã GUI Testing Instructions")
    print("=" * 40)
    
    print("\nüöÄ Steps to Test with NetFlux5G GUI:")
    
    print("\n1Ô∏è‚É£ Start NetFlux5G Application:")
    print("   ./netflux5g.sh")
    print("   # or")
    print("   python src/main.py")
    
    print("\n2Ô∏è‚É£ Load or Create 5G Network Topology:")
    print("   ‚Ä¢ Click 'File' ‚Üí 'Load Template' ‚Üí '5g_core_test'")
    print("   ‚Ä¢ Or create a new topology with 5G components")
    
    print("\n3Ô∏è‚É£ Add 5G Components:")
    print("   ‚Ä¢ NRF (Network Repository Function)")
    print("   ‚Ä¢ AMF (Access and Mobility Management Function)")
    print("   ‚Ä¢ SMF (Session Management Function)")
    print("   ‚Ä¢ UPF (User Plane Function)")
    print("   ‚Ä¢ gNB (Next Generation NodeB)")
    print("   ‚Ä¢ UE (User Equipment)")
    print("   ‚Ä¢ MongoDB (Database)")
    
    print("\n4Ô∏è‚É£ Configure Component Properties:")
    print("   ‚Ä¢ Right-click on components to set properties")
    print("   ‚Ä¢ MCC/MNC, TAC, IMSI, etc.")
    print("   ‚Ä¢ The new YAML config system will use these properties")
    
    print("\n5Ô∏è‚É£ Run Simulation:")
    print("   ‚Ä¢ Click 'Run Simulation' button (F5)")
    print("   ‚Ä¢ Watch the deployment process")
    print("   ‚Ä¢ New YAML configs will be automatically generated")
    
    print("\n6Ô∏è‚É£ Monitor Deployment:")
    print("   ‚Ä¢ Check terminal output for config creation messages")
    print("   ‚Ä¢ Look for: 'Created instance config: ./config/instances/...'")
    print("   ‚Ä¢ Verify containers start successfully")
    
    print("\n7Ô∏è‚É£ Access Container Terminal:")
    print("   ‚Ä¢ Use Terminal Dialog to access running containers")
    print("   ‚Ä¢ Test connectivity between components")
    
    print("\n8Ô∏è‚É£ View Generated Configurations:")
    print("   ‚Ä¢ Check './config/instances/' directory")
    print("   ‚Ä¢ Each component will have its own config directory")
    print("   ‚Ä¢ Configurations are mounted into containers")
    
    print("\nüîç What to Look For:")
    print("   ‚úÖ Config creation messages during deployment")
    print("   ‚úÖ Successful container startup")
    print("   ‚úÖ Configuration files in './config/instances/'")
    print("   ‚úÖ Volume mounts in container logs")
    
    print("\nüö® Troubleshooting:")
    print("   ‚Ä¢ If deployment fails, check Docker is running")
    print("   ‚Ä¢ Ensure no old containers are blocking network")
    print("   ‚Ä¢ Check logs for configuration creation errors")
    print("   ‚Ä¢ Verify YAML files are valid")

if __name__ == "__main__":
    print("NetFlux5G YAML Configuration System")
    print("App Integration Testing")
    print()
    
    # Run integration tests
    success = test_app_integration()
    
    # Show GUI testing instructions
    show_gui_testing_instructions()
    
    if success:
        print("\nüéâ System Ready! You can now test with the NetFlux5G GUI.")
        print("Run: ./netflux5g.sh")
    else:
        print("\n‚ö†Ô∏è  Please fix the configuration system issues before GUI testing.")
