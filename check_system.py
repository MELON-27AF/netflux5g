#!/usr/bin/env python3
"""
NetFlux5G System Requirements Checker
Checks system resources and provides recommendations for running NetFlux5G.
"""

import subprocess
import sys
import os
import platform
import psutil

def get_system_info():
    """Get basic system information"""
    info = {
        'os': platform.system(),
        'os_version': platform.version(),
        'architecture': platform.machine(),
        'cpu_count': psutil.cpu_count(),
        'memory_gb': round(psutil.virtual_memory().total / (1024**3), 1),
        'available_memory_gb': round(psutil.virtual_memory().available / (1024**3), 1),
        'disk_free_gb': round(psutil.disk_usage('/').free / (1024**3), 1) if os.name != 'nt' else round(psutil.disk_usage('C:').free / (1024**3), 1)
    }
    return info

def check_docker_resources():
    """Check Docker resource allocation"""
    try:
        # Get Docker system info
        result = subprocess.run(['docker', 'system', 'info'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            return True, result.stdout
        else:
            return False, "Could not get Docker system info"
    except:
        return False, "Docker not available"

def check_requirements():
    """Check if system meets requirements"""
    info = get_system_info()
    
    print("üñ•Ô∏è  System Information")
    print("======================")
    print(f"OS: {info['os']} {info['os_version']}")
    print(f"Architecture: {info['architecture']}")
    print(f"CPU Cores: {info['cpu_count']}")
    print(f"Total Memory: {info['memory_gb']} GB")
    print(f"Available Memory: {info['available_memory_gb']} GB")
    print(f"Free Disk Space: {info['disk_free_gb']} GB")
    
    print("\nüìã Requirements Check")
    print("=====================")
    
    # Check memory
    if info['memory_gb'] >= 8:
        print("‚úÖ Memory: Sufficient (>= 8 GB recommended)")
    elif info['memory_gb'] >= 4:
        print("‚ö†Ô∏è Memory: Minimal (4-8 GB, may experience slowdowns)")
    else:
        print("‚ùå Memory: Insufficient (< 4 GB, not recommended)")
    
    # Check available memory
    if info['available_memory_gb'] >= 3:
        print("‚úÖ Available Memory: Good (>= 3 GB)")
    elif info['available_memory_gb'] >= 2:
        print("‚ö†Ô∏è Available Memory: Minimal (2-3 GB)")
    else:
        print("‚ùå Available Memory: Low (< 2 GB, may cause issues)")
    
    # Check disk space
    if info['disk_free_gb'] >= 10:
        print("‚úÖ Disk Space: Sufficient (>= 10 GB recommended)")
    elif info['disk_free_gb'] >= 5:
        print("‚ö†Ô∏è Disk Space: Minimal (5-10 GB)")
    else:
        print("‚ùå Disk Space: Low (< 5 GB, not enough for Docker images)")
    
    # Check CPU
    if info['cpu_count'] >= 4:
        print("‚úÖ CPU Cores: Good (>= 4 cores)")
    elif info['cpu_count'] >= 2:
        print("‚ö†Ô∏è CPU Cores: Minimal (2-4 cores)")
    else:
        print("‚ùå CPU Cores: Insufficient (< 2 cores)")
    
    print("\nüê≥ Docker Information")
    print("====================")
    
    docker_ok, docker_info = check_docker_resources()
    if docker_ok:
        print("‚úÖ Docker is running")
        
        # Parse some useful info from docker system info
        lines = docker_info.split('\n')
        for line in lines:
            if 'Total Memory:' in line:
                print(f"Docker Memory: {line.split(':')[1].strip()}")
            elif 'CPUs:' in line:
                print(f"Docker CPUs: {line.split(':')[1].strip()}")
    else:
        print(f"‚ùå Docker issue: {docker_info}")
    
    print("\nüí° Recommendations")
    print("==================")
    
    if info['memory_gb'] < 8:
        print("‚Ä¢ Close unnecessary applications to free up memory")
        print("‚Ä¢ Consider upgrading to at least 8 GB RAM")
    
    if info['available_memory_gb'] < 3:
        print("‚Ä¢ Free up memory by closing applications")
        print("‚Ä¢ Restart your system if memory usage is high")
    
    if info['disk_free_gb'] < 10:
        print("‚Ä¢ Free up disk space (Docker images require ~2-3 GB)")
        print("‚Ä¢ Clean up old Docker images: docker system prune")
    
    if info['cpu_count'] < 4:
        print("‚Ä¢ Performance may be slower with fewer CPU cores")
        print("‚Ä¢ Consider running simpler network topologies")
    
    print("\nüîß Performance Tips")
    print("===================")
    print("‚Ä¢ Close web browsers and other memory-intensive applications")
    print("‚Ä¢ Ensure Docker Desktop has adequate resource allocation")
    print("‚Ä¢ Use wired internet connection for faster image downloads")
    print("‚Ä¢ Run the environment preparation script before starting NetFlux5G")
    
    return info

def main():
    """Main function"""
    print("üîç NetFlux5G System Requirements Checker")
    print("========================================\n")
    
    try:
        check_requirements()
    except Exception as e:
        print(f"Error checking system requirements: {e}")
        sys.exit(1)
    
    print("\nüöÄ Next Steps")
    print("=============")
    print("1. Run: python3 prepare_environment.py")
    print("2. Run: ./netflux5g.sh")

if __name__ == "__main__":
    main()
